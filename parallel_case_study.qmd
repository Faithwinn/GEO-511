---
title: "Case study-parallel"
author: "Faithwin Gbadamosi"
format: html
---

## Libraries for analysis

```{r}
#install.packages("mapview")
#install.packages("foreach")
#install.packages("doParallel")
#install.packages("tidycensus")
library(tidyverse)
library(tidycensus)
library(spData)
library(sf)
library(mapview) # new package that makes easy leaflet maps
library(foreach)
library(doParallel)
registerDoParallel(4)
getDoParWorkers() # check registered cores
```

Set Up Census API Key and Variables

```{r}
# Set your Census API key (replace "YOUR_API_KEY" with your key)
census_api_key("f3bf71caa5fdb11eefff6bb83c7dec54f179b45c", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")

# Specify variables for racial demographics
race_vars <- c(
  "Total Population" = "P1_001N",
  "White alone" = "P1_003N",
  "Black or African American alone" = "P1_004N",
  "American Indian and Alaska Native alone" = "P1_005N",
  "Asian alone" = "P1_006N",
  "Native Hawaiian and Other Pacific Islander alone" = "P1_007N",
  "Some Other Race alone" = "P1_008N",
  "Two or More Races" = "P1_009N"
)

```

Let's download census data

```{r}
options(tigris_use_cache = TRUE) #to not download dataset multiple times
erie <- get_decennial(
  geography = "block", 
  variables = race_vars, 
  year = 2020,
  state = "NY", 
  county = "Erie County", 
  geometry = TRUE, 
  sumfile = "pl", 
  cache_table = TRUE
)
```

### Crop Data to Buffalo Region

```{r}
buffalo_bbox <- st_bbox(c(xmin = -78.9, xmax = -78.85, ymin = 42.888, ymax = 42.92), crs = st_crs(erie))
erie_cropped <- st_crop(erie, buffalo_bbox)

```

Generate random points for each racial group using parallel processing

```{r}
# Convert the variable column to a factor for iteration
erie_cropped$variable <- factor(erie_cropped$variable)

# Use foreach to generate points for each racial group
racial_dots <- foreach(
  race = levels(erie_cropped$variable), 
  .combine = rbind, 
  .packages = c("sf", "dplyr")
) %dopar% {
  erie_cropped %>%
    filter(variable == race) %>%
    st_sample(size = .$value, type = "random") %>%
    st_as_sf() %>%
    mutate(variable = race)
}

```

Visualize Using Mapview

```{r}
# Create a racial dot map
mapview(
  racial_dots, 
  zcol = "variable", 
  cex = 1, 
  legend = TRUE
)

```

Final output
